#!/usr/bin/env bash

source ~/.dotfiles/utils/chalk.sh

devstack_thing() {
    app=$1
    dir=$(pwd)
    shift
    cd "$HOME/code/liveintent/devstack"
    set -o allexport; source .env; set +o allexport

    echo "> docker-compose -f ~/code/liveintent/devstack/services/$app/docker-compose.devstack.yml $@"
    docker-compose -f "$HOME/code/liveintent/devstack/services/$app/docker-compose.devstack.yml" "$@"
    cd "$dir"
}
alias li="devstack_thing"

# /-------------------------------------------------------------------------------
# | Utilities
# |-------------------------------------------------------------------------------
# /

# come back here quickly
alias shortcuts="vim ~/.aliases"

# ls replacement
source ~/.exa-colors
alias ls="exa -lb --time-style=long-iso --group-directories-first -a"
alias l="ls"
# alias ll="exa -lbGF --git --group-directories-first"
alias la="exa -lbhHigUmuSa@ --time-style=long-iso --git --color-scale"

alias cat="ccat"

# copy current working dir
alias cpwd="pwd | tr -d '\n' | pbcopy"

# because you can't go back from a rm -rf...
alias rm="echo Dude, stop using rm! Use \'trash\' or, if you insist, \'/bin/rm\'."

# /-------------------------------------------------------------------------------
# | Git is great
# |-------------------------------------------------------------------------------
# /
alias gs='git status'
alias nah="git reset --hard head && git clean -fd"

alias gstash="git add . && git commit -m 'stash'"
alias gpop="git reset --soft head~1 && git reset head"
alias gsu='git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)'
alias gpu='git push -u origin $(git rev-parse --abbrev-ref HEAD)'

# destructive, ye' be warned
grho() {
    branch=$(git branch | grep \* | cut -d ' ' -f2)
    git reset --hard origin/$branch
}

gri() {
    git rebase -i head~$1
}

# git diff without the git
gdiff() {
    git diff --no-index $1 $2 | diff-so-fancy | less
}

m() {
    git commit -m "$@"
}

alias grc="git rebase --continue"
alias grs="git rebase --skip"

# /-------------------------------------------------------------------------------
# | Jumping around
# |-------------------------------------------------------------------------------
# /
alias home='cd ~'
alias desk='cd ~/desktop'
alias dotfiles='cd ~/.dotfiles'
alias code='cd ~/code'
alias emd='cd ~/.emacs.d'
alias dmd='cd ~/.doom.d'

# /-------------------------------------------------------------------------------
# | Docker
# |-------------------------------------------------------------------------------
# /

alias c="docker-compose"

# launch portainer (gui to manage docker)
alias portainer="docker volume create portainer_data &&  docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer"

# /-------------------------------------------------------------------------------
# | K8s
# |-------------------------------------------------------------------------------
# /

alias kl="kubectl" # bc i always misspell that one

# /-------------------------------------------------------------------------------
# | PHP
# |-------------------------------------------------------------------------------
# /

alias phpunit='vendor/bin/phpunit'
alias pu='phpunit'
alias pf="phpunit --filter"
alias tf="composer test-watch -- --filter"
alias tw="composer test-watch"

# laravel stuff
alias art='php artisan'
alias rr='php artisan route:pretty --group=path'

test_in_laravel() {
    grep laravel/framework composer.json > /dev/null 2>&1
}

start_tinker_session() {
    if test_in_laravel; then
        php artisan tinker "$@"
    else
        php ~/code/laravel/artisan tinker "$@"
    fi
}

tinker() {
    if [ -z "$1" ]; then
        start_tinker_session
    else
        start_tinker_session --execute="dd($1);"
    fi
}

composer-link() {
    dir=$1

    if [[ -z $dir ]]; then
        print_error "Please specificy a package name."
        return;
    fi

    if [[ ! -d $dir ]]; then
        print_error "Directory '$(pwd)/$dir' does not exist."
        return;
    fi

    if [[ ! -f $dir/composer.json ]]; then
        print_error "$dir is not an installable PHP package."
        return;
    fi

    jq --indent 4 \
        '.repositories |= [{"type": "path", "url": "'$dir'", "options": {"symlink": true}}] + . ' composer.json \
        > composer.tmp.json \
        && mv composer.tmp.json composer.json

    packageName=$(jq -r '.name' $dir/composer.json)

    composer require $packageName @dev
}

composer-unlink() {
  git checkout composer.json composer.lock
  composer update
}

# /-------------------------------------------------------------------------------
# | LiveIntent
# |-------------------------------------------------------------------------------
# /
tunnel() {
    ssh -i ~/.ssh/li.id_rsa -L $2:$1-rds.liveintenteng.com:3306 $1-bastion
}
