#!/usr/bin/env bash

export FZF_DEFAULT_OPTS='--layout=reverse'

# /-------------------------------------------------------------------------------
# | Git
# |-------------------------------------------------------------------------------
# /
alias glGraph='git log --graph --color=always --format="%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

# gco - checkout git branch (including remote branches), sorted by most recent commit, limit 50 last branches
unalias gco 2> /dev/null
gco() {
  if [[ ! -z $@ ]]; then git checkout "$@"; return; fi

  local branches branch
  branches=$(git for-each-ref --count=50 --sort=-committerdate --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##" | sed "s/.*\///")
}

# glo - Replacement for git log, shows previews, allows selecting commits to view further
unalias glo 2> /dev/null
glo() {
    glGraph |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, ctrl-y to copy hash" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "ctrl-y:execute:$_gitLogLineToHash | pbcopy"
}

# the opposite of glo (shows incoming changes)
alias gro="glo ..@{u}"

# /-------------------------------------------------------------------------------
# | LiveIntent
# |-------------------------------------------------------------------------------
# /
li() {
  if [[ -n "$@" ]]; then platformer "$@"; return; fi

  local commands command
  commands=$(platformer list -n 2>&1 | awk '{print $1}')
  command=$(echo "$commands" | fzf --ansi \
    --preview="platformer {} --help" \
    --header "enter to select") &&

  print -z "platformer $command"
}

ku() {
  local context

  context=$(kubectl config get-contexts -o name | fzf) &&
      kubectl config use-context $context
}

kl() {
  local pod

  pod=$(kubectl get pods --all-namespaces --no-headers | fzf) &&
      print -z "$(echo $pod | awk '{print "kubectl logs -n " $1 " " $2}')"
}

# /-------------------------------------------------------------------------------
# | System
# |-------------------------------------------------------------------------------
# /
# env - Replacment for env
alias env="/usr/bin/env | fzf"
